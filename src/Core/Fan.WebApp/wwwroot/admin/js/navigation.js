Vue.component("navigation",{mixins:[navigationMixin],data:()=>({dialogVisible:!1,dialogTitle:"",settingsUrl:null,infoPanels:[!0,!1,!1,!1],custLinkValid:!1,custLinkUrl:"",custLinkText:"",rules:{required:a=>!!a||"Required.",url:()=>!0},infoOptions:{group:{name:"navs",pull:"clone",put:!1},sort:!1},menuOptions:{group:"navs",ghostClass:"sortable-ghost"}}),mounted(){this.initSettingsUpdatedHandler()},methods:{async add(a){let b={fromId:a.from.id,menuId:a.to.id,index:a.newIndex,oldIndex:a.oldIndex};if("page-navs"===a.from.id){let c=this.pages[a.oldIndex];b.id=c.id,b.type=c.type,b.text=c.text}else if("app-navs"===a.from.id){let c=this.apps[a.oldIndex];b.id=c.id,b.type=c.type,b.text=c.text}else if("cat-navs"===a.from.id){let c=this.cats[a.oldIndex];b.id=c.id,b.type=c.type,b.text=c.text}else{let c=this.menus.find(b=>b.id.toString()===a.to.id),d=c.navs[a.newIndex];b.id=d.id,b.type=d.type,b.text=d.text,b.title=d.title,b.url=d.url,b.origNavName=d.origNavName}console.log("Nav being added: ",b);try{let c=await axios.post("/admin/navigation?handler=add",b,this.$root.headers),d=this.menus.find(b=>b.id.toString()===a.to.id),e=d.navs[a.newIndex];e.settingsUrl=c.data.settingsUrl,e.origNavName=b.origNavName}catch(a){console.error(a),this.$root.toastError("Add menu item failed.")}},async sort(a){if(a.from.id===a.to.id)try{let b={menuId:a.to.id,index:a.newIndex,oldIndex:a.oldIndex};console.log("sort: ",b),await axios.post("/admin/navigation?handler=sort",b,this.$root.headers)}catch(a){console.error(a),this.$root.toastError("Sort menu item failed.")}},async deleteNav(a,b){if(confirm(`Are you sure to delete this menu item?`))try{await axios.delete(`/admin/navigation?menuId=${a}&index=${b}`,this.$root.headers);let c=this.menus.find(b=>b.id===a);c.navs.splice(b,1)}catch(a){console.error(a),this.$root.toastError("Delete menu item failed.")}},async addCustLink(){try{console.log("custLinkUrl: ",this.custLinkUrl),console.log("custLinkText: ",this.custLinkText),console.log("selectedMenuId",this.selectedMenuId),console.log("menu",this.menus.find(a=>a.id===this.selectedMenuId).navs);let a={url:this.custLinkUrl,text:this.custLinkText,menuId:this.selectedMenuId,index:this.menus.find(a=>a.id===this.selectedMenuId).navs.length},b=await axios.post("/admin/navigation?handler=customLink",a,this.$root.headers);console.log(b.data),a.settingsUrl=b.data.settingsUrl,a.type=b.data.type,this.menus.find(a=>a.id===this.selectedMenuId).navs.push(a)}catch(a){console.error(a),this.$root.toastError("Add menu item failed.")}},async setHome(a){try{console.log("Set nav as home: ",a),await axios.post(`/admin/navigation?handler=home`,a,this.$root.headers),this.home=a,this.$root.toast("Home updated.")}catch(a){console.error(a),this.$root.toastError("Set as home failed.")}},viewSettings(a){console.log(a),this.dialogTitle=a.text,this.dialogVisible=!0,this.settingsUrl=a.settingsUrl},closeDialog(){this.dialogVisible=!1},initSettingsUpdatedHandler(){let a=this;window.document.addEventListener("ExtSettingsUpdated",b=>{console.log("nav settings updated: ",b.detail);let c=this.menus.find(a=>a.id===b.detail.menuId),d=c.navs[b.detail.index];d.text=b.detail.text,a.$root.toast(b.detail.msg),a.closeDialog()})}}});
//# sourceMappingURL=navigation.js.map